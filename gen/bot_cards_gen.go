package gen

import (
	"bytes"
	"fmt"
	"os"

	"github.com/Pato05/unobot/constants"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var cardFileIDMap = make(map[string]string)

var colorIndex = 0
var cardIndex = 0
var isHandlingGrayCards = false
var colors = []string{"Blue", "Green", "Red", "Yellow"}
var colorCards = []string{"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "PlusTwo", "Reverse", "Skip"}
var blackCards = []string{"PlusFour", "Colorchooser"}
var gameControlCards = []string{"DrawIcon", "DrawText", "PassIcon", "PassText", "CallBluff", "GameInfo"}

func writeCode() {
	var resultingCode bytes.Buffer
	resultingCode.WriteString(`package cards

// generated by gen/bot_cards_gen.go

const (
	// stickers' file id`)
	for key, fileId := range cardFileIDMap {
		resultingCode.WriteString(fmt.Sprintf("    fileId_%s string = \"%s\"\n", key, fileId))
	}
	resultingCode.WriteByte(')')
	os.WriteFile("cards/card_constants.go", resultingCode.Bytes(), 0644)
}

func contains[T comparable](s []T, needle T) bool {
	for _, el := range s {
		if el == needle {
			return true
		}
	}

	return false
}

func writeGreyCardsCode() {
	var resultingCode bytes.Buffer
	actionIcons := make(map[string]string)
	resultingCode.WriteString(`package cards

// generated by gen/bot_cards_gen.go

const (
	// stickers' file id`)
	for key, fileId := range cardFileIDMap {
		if contains(gameControlCards, key) {
			actionIcons[key] = fileId
			continue
		}
		resultingCode.WriteString(fmt.Sprintf("    fileId_%s string = \"%s\"\n", key, fileId))

	}
	resultingCode.WriteByte(')')
	os.WriteFile("cards/grey_card_constants.go", resultingCode.Bytes(), 0644)

	var codeActionIcons bytes.Buffer
	codeActionIcons.WriteString(`package cards
// generated by gen/bot_cards_gen.go

// action icons
const (`)

	for key, fileId := range actionIcons {
		codeActionIcons.WriteString(fmt.Sprintf("    fileId_%s string = \"%s\"", key, fileId))
	}

	codeActionIcons.WriteByte(')')
	os.WriteFile("cards/action_constants.go", codeActionIcons.Bytes(), 0644)
}

func HandleCardsGen(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message.From.ID == constants.BOT_ADMIN {
		if isHandlingGrayCards {
			HandleGreyCardsGen(update, bot)
			return
		}
		if update.Message.Sticker != nil {
			if colorIndex >= 0 {
				cardFileIDMap[fmt.Sprintf("%s_%s", colors[colorIndex], colorCards[cardIndex])] = update.Message.Sticker.FileID
				if cardIndex++; cardIndex > 12 {
					cardIndex = 0
					if colorIndex++; colorIndex == 4 {
						colorIndex = -1
					}
				}
			} else {
				cardFileIDMap[blackCards[cardIndex]] = update.Message.Sticker.FileID
				if cardIndex++; cardIndex >= 2 {
					cardIndex = 0
					colorIndex = 0
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "Writing to file..."))
					writeCode()
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "Done!"))
					isHandlingGrayCards = true
					// clear out everything
					cardFileIDMap = make(map[string]string)
					colorIndex = 0
					cardIndex = 0
					HandleGreyCardsGen(update, bot)
					return
				}
			}
		}
		if colorIndex >= 0 {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("Please send %s %s", colors[colorIndex], colorCards[cardIndex])))
		} else {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("Please send %s", blackCards[cardIndex])))
		}
	}
}

func HandleGreyCardsGen(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message.From.ID == constants.BOT_ADMIN {
		if update.Message.Sticker != nil {
			if colorIndex >= 0 {
				cardFileIDMap[fmt.Sprintf("Grey_%s_%s", colors[colorIndex], colorCards[cardIndex])] = update.Message.Sticker.FileID
				if cardIndex++; cardIndex > 12 {
					cardIndex = 0
					if colorIndex++; colorIndex == 4 {
						colorIndex = -1
					}
				}
			} else {
				if colorIndex == -1 {
					cardFileIDMap[fmt.Sprintf("Grey_%s", blackCards[cardIndex])] = update.Message.Sticker.FileID
					if cardIndex++; cardIndex >= 2 {
						cardIndex = 0
						colorIndex = -2
					}
				} else {
					cardFileIDMap[gameControlCards[cardIndex]] = update.Message.Sticker.FileID
					if cardIndex++; cardIndex >= 6 {
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "Writing to file..."))
						writeGreyCardsCode()
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "Done!"))
						return
					}
				}

			}
		}
		if colorIndex >= 0 {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("Please send Grey %s %s", colors[colorIndex], colorCards[cardIndex])))
		} else {
			switch colorIndex {
			case -1:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("Please send Grey %s", blackCards[cardIndex])))
			case -2:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("Please send %s", gameControlCards[cardIndex])))
			}
		}
	}
}
