#!/usr/bin/env python3
# Compose necessary lookup maps for cards.

def main():

    colors = ["Wild", "Blue", "Yellow", "Green", "Red"]
    numbers = {
        "Zero": 0,
        "One": 1,
        "Two": 2,
        "Three": 3,
        "Four": 4,
        "Five": 5,
        "Six": 6,
        "Seven": 7,
        "Eight": 8,
        "Nine": 9,
        "Reverse": "Special_Reverse",
        "Skip": "Special_Skip",
        "PlusTwo": "Special_PlusTwo"
    }
    specials = ["PlusTwo", "Reverse", "Skip"]
    specials_specials = ["Colorchooser", "PlusFour"]
    found_cards = [None] * 5
    all_cards = ""
    with open("cards/card_constants.go") as f:
        for line in f:
            line = line.strip()
            var_name = line.split(" ")[0]
            a = var_name.split("_", 2)
            t = a[0]
            color = a[1] if len(a) > 1 else None
            card = a[2] if len(a) > 2 else ""
            if color in specials_specials:
                card = color
                color = "Wild"
                special = card
                number = specials_specials.index(card)
                index = number
            elif not color in colors:
                continue
            else:
                if not "_" in var_name:
                    print(var_name)
                    continue
                special = card if card in specials else "None"
                number = numbers[card] if card in numbers else -1
                index = numbers[card] if card in numbers else 0
            if type(index) == str:
                index = 10
            if card in specials:
                index += specials.index(card)
            print(f"{color=}, {card=}, {special=}, {number=}, {index=}")

            if t == "fileId":
                if found_cards[colors.index(color)] is None:
                    if color == "Wild":
                        found_cards[colors.index(color)] = [color, [None] * 2]
                    else:
                        found_cards[colors.index(color)] = [None] * 13

                found_cards[colors.index(color)][index] = [
                    var_name, None, [color, special, number]]
                print(found_cards[colors.index(color)])
                continue
            if t != "uniqueId":
                continue

    print(found_cards)

    with open("cards/gray_card_constants.go", "r") as f:
        for line in f:
            line = line.strip()
            if not "fileId_" in line:
                continue
            var_name = line.split(" ")[0]
            print(var_name)
            _, *a = var_name.split("_")
            if len(a) == 3:
                color = a[1]
                card = a[2]
            elif len(a) == 2:
                color = a[1]
                card = ""
            else:
                continue
            if color in specials_specials:
                color_idx = 0
                card = color
                color = "Wild"
                special = card
                number = specials_specials.index(card)
                index = number
            elif not color in colors:
                continue
            else:
                color_idx = 1 + colors.index(color)
                special = card if card in specials else "None"
                number = numbers[card] if card in numbers else -1
                index = numbers[card] if card in numbers else 0
            if type(index) == str:
                index = 10
            if card in specials:
                index += specials.index(card)
            print(f"GREY: {color=}, {card=}, {special=}, {number=}, {index=}")
            found_cards[colors.index(color)][index][1] = var_name

    tot_index = 0
    for key, cards in enumerate(found_cards):
        all_cards += f"    // {colors[key]} cards\n"
        for card in cards:
            color, special, number = card[2]
            all_cards += f"""    {{Color: {color}, Special: Special_{special}, Number: {number if special == "None" else -1}, CardIndex: {number if special == "None" or key == 0 else f"uint8({number})"}}},\n"""
            tot_index += 1
        all_cards += "\n"

    new_code = f"""package cards

// generated by gen/card_gen.py, based on cards/card_constants.go

// all the uno cards
var Cards = []Card{{
{all_cards}
}}

// all cards' file id
var CardFileIDs = []CardIDs{{\n"""
    print(found_cards)
    for key, cards in enumerate(found_cards):
        new_code += f"    // {colors[key]} cards\n"
        new_code += f"    " + \
            ",\n    ".join(
                f"{{Normal: {x[0]}, Gray: {x[1]}}}" for x in cards) + ",\n\n"
    new_code += "}"
    new_code += """

// color -> cards file ids lookup table
var CardFileIDsByColor = map[CardColor][]CardIDs{
"""
    cnt = 0
    for index, cards in enumerate(found_cards):
        new_code += f"    {colors[index]}: CardFileIDs[{cnt}:{cnt+len(cards)}],\n"
        cnt += len(cards)
    new_code += "}"
    with open("cards/card_maps.go", "w") as f:
        f.write(new_code)


if __name__ == '__main__':
    main()
